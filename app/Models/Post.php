<?php

namespace App\Models;

use App\Notifications\PostWasUpdated;
use App\Traits\RecordActivity;
use Illuminate\Database\Eloquent\Factories\HasFactory;
use Illuminate\Database\Eloquent\Model;
use Illuminate\Database\Eloquent\Builder;

class Post extends Model
{
    use HasFactory,RecordActivity;
    protected $guarded=[];
    protected $with=['channel','creator'];
    protected $appends=['isSubscribed'];
    public static function boot()
    {
        parent::boot(); // TODO: Change the autogenerated stub
        static::addGlobalScope('replyCount',function (Builder $builder){
            return $builder->withCount('replies');
        });
        static::deleting(function ($post){
            $post->replies->each(function ($reply){
                $reply->delete();
            });
        });

    }


    public function ScopeFilter(Builder $query,$filters){
        return $filters->apply($query);
    }

    public function path(){
        return "posts/{$this->channel->slug}/{$this->id}";
    }
    /*
     *add reply to post
     * @return array $reply
     *
     *@return $reply
     */
    public function addReply($request)
    {
        $reply= $this->replies()->create($request);

        $this->subscriptions->filter(function ($sub) use ($reply){
            return $sub->user_id != $reply->user_id;
        })->each(function ($sub) use ($reply){
           $sub->user->notify(new PostWasUpdated($this,$reply));
        });

        return $reply;
    }
    public function subscribe($userId=null){
        $this->subscriptions()->create([
            'user_id'=>$userId?:auth()->id()
        ]);
    }
    public function unsubscribe(){
        $this->subscriptions()->where('user_id',auth()->id())->delete();

    }
    public function getIsSubscribedAttribute(){
        return  $this->subscriptions()->where('user_id',auth()->id())->exists();
    }
    public function replies(){
        return $this->hasMany(Reply::class);
    }
    public function creator(){
        return $this->belongsTo(User::class,'user_id');
    }
    public function channel(){
        return $this->belongsTo(Channel::class);
    }
    public function subscriptions(){
        return $this->hasMany(PostSubscription::class);
    }


}
